# ==============================================================================
# SCRIPT DEFINITIVO PARA: pages/2_Perfil_del_Vendedor.py
# VERSI√ìN: 5.0 (Soluci√≥n TypeError + Refactorizaci√≥n Robusta)
# FECHA: 16 de Julio, 2025
#
# DESCRIPCI√ìN:
# Versi√≥n completamente refactorizada que no solo soluciona el TypeError en
# el an√°lisis RFM, sino que introduce constantes para nombres de columnas,
# validaciones de datos m√°s estrictas y mejoras generales de legibilidad
# y mantenibilidad.
#
# CORRECCIONES Y MEJORAS CLAVE:
# 1.  ERROR CR√çTICO (TypeError) SOLUCIONADO:
#     - Se a√±adi√≥ un bloque de validaci√≥n y conversi√≥n de tipos expl√≠cita
#       justo despu√©s de la agregaci√≥n RFM. Las columnas 'Recencia',
#       'Frecuencia' y 'Monetario' ahora son forzadas a tipos num√©ricos
#       (int, float), eliminando cualquier tipo mixto que causaba el
#       colapso de `st.dataframe`.
#
# 2.  ROBUSTEZ Y MANTENIBILIDAD (MEJORA MAYOR):
#     - Se introdujo una secci√≥n de CONSTANTES para todos los nombres de
#       columnas. Esto elimina los "magic strings", reduce dr√°sticamente
#       el riesgo de errores de tipeo y facilita futuras actualizaciones.
#     - Se mejor√≥ la funci√≥n `normalizar_texto` para manejar correctamente
#       m√∫ltiples espacios.
#
# 3.  L√ìGICA DE NEGOCIO REFINADA:
#     - Se mantiene la l√≥gica estable de `pd.cut` sobre `pd.qcut`, que ya
#       era una mejora significativa de la versi√≥n 4.2.
#     - Se a√±adieron m√°s comprobaciones de DataFrames vac√≠os para prevenir
#       errores en cascada.
# ==============================================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import unicodedata

# ==============================================================================
# SECCI√ìN 1: CONFIGURACI√ìN INICIAL Y VALIDACI√ìN
# ==============================================================================

st.set_page_config(page_title="Perfil del Vendedor", page_icon="üí°", layout="wide")

def normalizar_texto(texto):
    """Normaliza un texto a may√∫sculas, sin acentos y con espacios simples."""
    if not isinstance(texto, str):
        return texto
    try:
        # Pasa a NFD para separar caracteres de sus acentos
        s = ''.join(c for c in unicodedata.normalize('NFD', texto)
                    if unicodedata.category(c) != 'Mn')
        # Convierte a may√∫sculas, reemplaza guiones y normaliza espacios
        return ' '.join(s.upper().replace('-', ' ').split())
    except (TypeError, AttributeError):
        return texto

def mostrar_acceso_restringido():
    """Muestra un mensaje de advertencia si el usuario no est√° autenticado."""
    st.header("üîí Acceso Restringido")
    st.warning("Por favor, inicie sesi√≥n desde la p√°gina principal `üè† Resumen Mensual` para continuar.")
    st.image("https://raw.githubusercontent.com/DiegoMao201/Resumen-Ventas-Gerenciales/main/LOGO%20FERREINOX%20SAS%20BIC%202024.png", width=300)
    st.stop()

# Carga de datos y configuraci√≥n desde la sesi√≥n
if not st.session_state.get('autenticado'):
    mostrar_acceso_restringido()

df_ventas_historico = st.session_state.get('df_ventas')
APP_CONFIG = st.session_state.get('APP_CONFIG')
DATA_CONFIG = st.session_state.get('DATA_CONFIG')

if df_ventas_historico is None or df_ventas_historico.empty or not APP_CONFIG or not DATA_CONFIG:
    st.error("Error Cr√≠tico: No se pudieron cargar los datos desde la sesi√≥n. Por favor, regrese a la p√°gina 'üè† Resumen Mensual' y vuelva a cargar los datos.")
    st.stop()


# ==============================================================================
# SECCI√ìN 2: CONSTANTES Y L√ìGICA DE AN√ÅLISIS ESTRAT√âGICO
# ==============================================================================

# --- Definici√≥n de Constantes para Nombres de Columnas ---
# Esto evita errores de tipeo y facilita el mantenimiento.
FECHA_VENTA = 'fecha_venta'
CLIENTE_ID = 'cliente_id'
NOMBRE_CLIENTE = 'nombre_cliente'
VALOR_VENTA = 'valor_venta'
COSTO_UNITARIO = 'costo_unitario'
UNIDADES_VENDIDAS = 'unidades_vendidas'
CODIGO_ARTICULO = 'codigo_articulo'
NOMBRE_ARTICULO = 'nombre_articulo'
NOM_VENDEDOR = 'nomvendedor'
COSTO_TOTAL_LINEA = 'costo_total_linea'
MARGEN_BRUTO = 'margen_bruto'
PORCENTAJE_MARGEN = 'porcentaje_margen'

def calcular_metricas_base(df):
    """Calcula el costo, margen y porcentaje de margen para cada l√≠nea de venta."""
    df_copy = df.copy()
    df_copy[COSTO_TOTAL_LINEA] = pd.to_numeric(df_copy[COSTO_UNITARIO], errors='coerce').fillna(0) * pd.to_numeric(df_copy[UNIDADES_VENDIDAS], errors='coerce').fillna(0)
    df_copy[MARGEN_BRUTO] = pd.to_numeric(df_copy[VALOR_VENTA], errors='coerce') - df_copy[COSTO_TOTAL_LINEA]
    df_copy[PORCENTAJE_MARGEN] = np.where(df_copy[VALOR_VENTA] > 0, (df_copy[MARGEN_BRUTO] / df_copy[VALOR_VENTA]) * 100, 0)
    return df_copy

def analizar_salud_cartera_avanzado(_df_periodo, _df_historico_contextual, fecha_inicio_periodo):
    """Analiza la cartera para identificar clientes ganados, retenidos, reactivados y en fuga."""
    clientes_periodo = set(_df_periodo[CLIENTE_ID].unique())
    
    df_antes_periodo = _df_historico_contextual[_df_historico_contextual[FECHA_VENTA] < fecha_inicio_periodo]
    clientes_antes_periodo = set(df_antes_periodo[CLIENTE_ID].unique())

    clientes_ganados = clientes_periodo - clientes_antes_periodo
    clientes_retenidos_o_reactivados = clientes_periodo.intersection(clientes_antes_periodo)
    clientes_en_fuga = clientes_antes_periodo - clientes_periodo

    fecha_reactivacion_limite = fecha_inicio_periodo - pd.Timedelta(days=90)
    df_ultima_compra_antes = df_antes_periodo.groupby(CLIENTE_ID)[FECHA_VENTA].max()
    
    clientes_potencialmente_reactivados = set(df_ultima_compra_antes[df_ultima_compra_antes < fecha_reactivacion_limite].index)
    clientes_reactivados = clientes_retenidos_o_reactivados.intersection(clientes_potencialmente_reactivados)
    clientes_retenidos = clientes_retenidos_o_reactivados - clientes_reactivados
    
    df_clientes_en_fuga = _df_historico_contextual[_df_historico_contextual[CLIENTE_ID].isin(clientes_en_fuga)].groupby([CLIENTE_ID, NOMBRE_CLIENTE]).agg(
        ultima_compra=(FECHA_VENTA, 'max'),
        valor_historico=(VALOR_VENTA, 'sum')
    ).reset_index().sort_values('valor_historico', ascending=False).head(10)

    return {
        "ganados": len(clientes_ganados), "retenidos": len(clientes_retenidos),
        "reactivados": len(clientes_reactivados), "en_fuga": len(clientes_en_fuga),
        "lista_clientes_en_fuga": df_clientes_en_fuga
    }

def analizar_rentabilidad_avanzado(_df_periodo):
    """Clasifica los productos en cuadrantes de rentabilidad vs. volumen."""
    if _df_periodo.empty: return pd.DataFrame()

    df_productos = _df_periodo.groupby([CODIGO_ARTICULO, NOMBRE_ARTICULO]).agg(
        Volumen_Venta=(VALOR_VENTA, 'sum'),
        Margen_Absoluto=(MARGEN_BRUTO, 'sum')
    ).reset_index()

    df_productos = df_productos[df_productos['Volumen_Venta'] > 0]
    if df_productos.empty: return pd.DataFrame()
    
    df_productos['Rentabilidad_Pct'] = np.where(df_productos['Volumen_Venta'] > 0, (df_productos['Margen_Absoluto'] / df_productos['Volumen_Venta']) * 100, 0)
    
    volumen_medio = df_productos['Volumen_Venta'].median()
    rentabilidad_media = df_productos['Rentabilidad_Pct'].median()
    
    def get_cuadrante(row):
        alto_volumen = row['Volumen_Venta'] >= volumen_medio
        alta_rentabilidad = row['Rentabilidad_Pct'] >= rentabilidad_media
        if alto_volumen and alta_rentabilidad: return '‚≠ê Motores de Ganancia'
        if alto_volumen and not alta_rentabilidad: return 'üêÑ Ventas de Volumen'
        if not alto_volumen and alta_rentabilidad: return 'üíé Gemas Ocultas'
        return 'ü§î Drenajes de Rentabilidad'
    
    df_productos['Cuadrante'] = df_productos.apply(get_cuadrante, axis=1)
    df_productos['Tama√±o_Absoluto'] = df_productos['Margen_Absoluto'].abs().fillna(1) + 1
    return df_productos

def realizar_analisis_rfm(_df_historico_vendedor):
    """Realiza un an√°lisis RFM completo y robusto sobre el historial de un vendedor."""
    if _df_historico_vendedor.empty or _df_historico_vendedor[CLIENTE_ID].nunique() < 5:
        return pd.DataFrame(), pd.DataFrame()
        
    df = _df_historico_vendedor.copy()
    fecha_max_analisis = df[FECHA_VENTA].max() + pd.Timedelta(days=1)
    
    rfm_df = df.groupby([CLIENTE_ID, NOMBRE_CLIENTE]).agg(
        Recencia=(FECHA_VENTA, lambda date: (fecha_max_analisis - date.max()).days),
        Frecuencia=(FECHA_VENTA, 'nunique'),
        Monetario=(VALOR_VENTA, 'sum')
    ).reset_index()
    
    # --- INICIO DE LA SOLUCI√ìN DEFINITIVA AL TypeError ---
    # 1. Validar y limpiar los datos despu√©s de la agregaci√≥n.
    rfm_df.dropna(subset=['Recencia', 'Frecuencia', 'Monetario'], inplace=True)
    rfm_df = rfm_df[rfm_df['Monetario'] > 0]

    if rfm_df.empty or len(rfm_df) < 5:
        return pd.DataFrame(), pd.DataFrame()

    # 2. Asegurar tipos de datos correctos ANTES de cualquier c√°lculo o visualizaci√≥n.
    #    Esto previene el TypeError en st.dataframe.
    rfm_df['Recencia'] = rfm_df['Recencia'].astype(int)
    rfm_df['Frecuencia'] = rfm_df['Frecuencia'].astype(int)
    rfm_df['Monetario'] = rfm_df['Monetario'].astype(float)
    # --- FIN DE LA SOLUCI√ìN ---

    # Puntuaci√≥n de Recencia (menos d√≠as = mejor) - L√≥gica de umbrales fijos.
    recencia_bins = [-1, 30, 90, 180, 365, rfm_df['Recencia'].max() + 1]
    rfm_df['R_Score'] = pd.cut(rfm_df['Recencia'], bins=recencia_bins, labels=[5, 4, 3, 2, 1], right=False)

    # Puntuaci√≥n de Frecuencia (m√°s compras = mejor) - L√≥gica de umbrales fijos.
    frecuencia_bins = [0, 1, 3, 5, 10, rfm_df['Frecuencia'].max() + 1]
    rfm_df['F_Score'] = pd.cut(rfm_df['Frecuencia'], bins=frecuencia_bins, labels=[1, 2, 3, 4, 5], right=False)

    # Puntuaci√≥n Monetaria (m√°s valor = mejor) - qcut es aceptable aqu√≠ pero con seguridad.
    try:
        rfm_df['M_Score'] = pd.qcut(rfm_df['Monetario'], 5, labels=[1, 2, 3, 4, 5], duplicates='drop')
    except ValueError: # Si a√∫n falla (baja varianza), asignar un puntaje por defecto.
        rfm_df['M_Score'] = 3 
    
    # Convertir a entero, ahora de forma segura
    rfm_df[['R_Score', 'F_Score', 'M_Score']] = rfm_df[['R_Score', 'F_Score', 'M_Score']].fillna(3).astype(int)

    # Mapa de segmentos basado en expresiones regulares para una clasificaci√≥n flexible.
    segt_map = {
        r'55[4-5]': 'Campeones', r'[3-4]5[4-5]': 'Campeones',
        r'54[4-5]': 'Clientes Leales', r'44[4-5]': 'Clientes Leales',
        r'[4-5][4-5]3': 'Potenciales Leales', r'[3-4][3-4][3-5]': 'Potenciales Leales',
        r'5[1-3][1-5]': 'Nuevos Clientes', r'4[1-3][1-5]': 'Prometedores',
        r'333': 'Necesitan Atenci√≥n', r'3[1-2][1-5]': 'Necesitan Atenci√≥n',
        r'1[3-5][1-5]': 'En Riesgo', r'2[3-5][1-5]': 'En Riesgo',
        r'12[1-5]': 'A Punto de Dormir', r'22[1-5]': 'A Punto de Dormir',
        r'11[1-5]': 'Hibernando', r'21[1-5]': 'Hibernando',
    }
    rfm_df['RFM_Score_Str'] = rfm_df['R_Score'].astype(str) + rfm_df['F_Score'].astype(str) + rfm_df['M_Score'].astype(str)
    rfm_df['Segmento'] = rfm_df['RFM_Score_Str'].replace(segt_map, regex=True)
    rfm_df['Segmento'] = rfm_df['Segmento'].apply(lambda x: 'Otros' if x.isnumeric() else x)
    
    resumen_segmentos = rfm_df.groupby('Segmento').agg(
        Numero_Clientes=(CLIENTE_ID, 'count'),
        Ventas_Totales=('Monetario', 'sum')
    ).sort_values('Ventas_Totales', ascending=False).reset_index()
    
    return rfm_df, resumen_segmentos

def analizar_tendencias(_df_periodo):
    """Analiza la evoluci√≥n de ventas y la concentraci√≥n de productos (Pareto)."""
    if _df_periodo.empty: return pd.DataFrame(), pd.DataFrame()
    
    df_ventas_mes = _df_periodo.set_index(FECHA_VENTA).resample('M')[VALOR_VENTA].sum().reset_index()
    df_ventas_mes['Mes'] = df_ventas_mes[FECHA_VENTA].dt.strftime('%Y-%m')
    
    df_productos_ventas = _df_periodo.groupby(NOMBRE_ARTICULO)[VALOR_VENTA].sum().sort_values(ascending=False).reset_index()
    if df_productos_ventas.empty: return df_ventas_mes, pd.DataFrame()

    total_ventas = df_productos_ventas[VALOR_VENTA].sum()
    top_5_ventas = df_productos_ventas.head(5)[VALOR_VENTA].sum()
    resto_ventas = total_ventas - top_5_ventas
    
    df_pareto = pd.DataFrame({'Categor√≠a': ['Top 5 Productos', 'Resto de Productos'], 'Ventas': [top_5_ventas, resto_ventas]})
    return df_ventas_mes, df_pareto


# ==============================================================================
# SECCI√ìN 3: COMPONENTES DE LA INTERFAZ DE USUARIO (UI)
# ==============================================================================

def generar_y_renderizar_resumen_ejecutivo(nombre_vendedor, analisis_cartera, df_rentabilidad, resumen_rfm):
    """Crea y muestra el resumen ejecutivo con los insights m√°s importantes."""
    st.header(f"üí° Resumen Ejecutivo y Plan de Acci√≥n para: {nombre_vendedor}")
    with st.container(border=True):
        st.markdown("#### Diagn√≥stico R√°pido del Periodo:")
        insight_cartera = f"**Movimiento de Cartera:** Lograste captar **{analisis_cartera['ganados']} clientes nuevos** y reactivar a **{analisis_cartera['reactivados']}**, ¬°bien hecho! Sin embargo, **{analisis_cartera['en_fuga']} clientes importantes est√°n en fuga**. Prioriza contactarlos revisando la pesta√±a `Diagn√≥stico de Cartera`."
        st.markdown(f"üìà {insight_cartera}")
        
        motores = df_rentabilidad[df_rentabilidad['Cuadrante'] == '‚≠ê Motores de Ganancia']
        drenajes = df_rentabilidad[df_rentabilidad['Cuadrante'] == 'ü§î Drenajes de Rentabilidad']
        insight_rentabilidad = ""
        if not motores.empty:
            producto_motor = motores.nlargest(1, 'Volumen_Venta')
            nombre_motor = producto_motor[NOMBRE_ARTICULO].iloc[0]
            venta_motor = producto_motor['Volumen_Venta'].iloc[0]
            insight_rentabilidad += f" Tu principal **motor de ganancia** es **'{nombre_motor}'**, que gener√≥ **${venta_motor:,.0f}**. ¬°Pot√©ncialo!"
        if not drenajes.empty:
            producto_drenaje = drenajes.nlargest(1, 'Volumen_Venta')
            nombre_drenaje = producto_drenaje[NOMBRE_ARTICULO].iloc[0]
            margen_drenaje = producto_drenaje['Margen_Absoluto'].iloc[0]
            insight_rentabilidad += f" ‚ö†Ô∏è **Alerta:** El producto **'{nombre_drenaje}'** es un **drenaje de rentabilidad** significativo (margen de ${margen_drenaje:,.0f}). Revisa su costo o estrategia de precio."
        if insight_rentabilidad:
            st.markdown(f"üí∞ **An√°lisis de Rentabilidad:**{insight_rentabilidad}")
            
        if not resumen_rfm.empty:
            campeones = resumen_rfm[resumen_rfm['Segmento'] == 'Campeones']
            if not campeones.empty:
                num_campeones = campeones['Numero_Clientes'].iloc[0]
                ventas_campeones = campeones['Ventas_Totales'].iloc[0]
                insight_rfm = f"Posees **{num_campeones} clientes 'Campeones'** que representan un valor de **${ventas_campeones:,.0f}** en tu historial. Son tu activo m√°s valioso. ¬°Cu√≠dalos y recomp√©nsalos!"
                st.markdown(f"‚ù§Ô∏è **Fidelidad de Clientes:** {insight_rfm}")
                
        st.markdown("---")
        st.success("**Plan de Acci√≥n Sugerido:**\n"
                    "1.  **URGENTE:** Contacta a los **'Clientes en Fuga'** y a los del segmento **'En Riesgo'**.\n"
                    "2.  **ESTRAT√âGICO:** Impulsa las ventas de tus **'Gemas Ocultas'** a tus clientes **'Campeones'** y **'Leales'**.\n"
                    "3.  **REVISI√ìN:** Analiza los costos de tus productos en el cuadrante **'Drenajes de Rentabilidad'**.")

def render_tab_diagnostico_cartera(analisis):
    """Muestra las m√©tricas y la tabla de clientes en fuga."""
    st.subheader("An√°lisis de Movimiento de Cartera")
    with st.container(border=True):
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Clientes Ganados üü¢", f"{analisis['ganados']}", help="Clientes que compraron por primera vez en este periodo.")
        col2.metric("Clientes Retenidos üîµ", f"{analisis['retenidos']}", help="Clientes que compraron en periodos anteriores y en este.")
        col3.metric("Clientes Reactivados ‚≠ê", f"{analisis['reactivados']}", help="Clientes que estaban inactivos (>90 d√≠as) y volvieron a comprar.")
        col4.metric("Clientes en Fuga üî¥", f"{analisis['en_fuga']}", help="Clientes que compraban antes pero no en este periodo.")
    st.markdown("---")
    st.subheader("‚ö†Ô∏è Top 10 Clientes en Fuga por Valor Hist√≥rico")
    st.info("Estos son los clientes m√°s valiosos que han dejado de comprar. ¬°Son tu principal prioridad para contactar!")
    
    df_fuga_display = analisis['lista_clientes_en_fuga'][[NOMBRE_CLIENTE, 'ultima_compra', 'valor_historico']]
    st.dataframe(df_fuga_display, use_container_width=True, hide_index=True,
                 column_config={
                     NOMBRE_CLIENTE: st.column_config.TextColumn("Nombre del Cliente"),
                     "ultima_compra": st.column_config.DateColumn("√öltima Compra", format="YYYY-MM-DD"),
                     "valor_historico": st.column_config.NumberColumn("Ventas Hist√≥ricas", format="$ #,##0")})

def render_tab_rentabilidad(df_rentabilidad):
    """Muestra el gr√°fico de cuadrantes de rentabilidad y la tabla de productos."""
    st.subheader("Cuadrantes de Rentabilidad de Productos")
    if df_rentabilidad.empty:
        st.warning("No hay datos de productos para analizar la rentabilidad en el periodo seleccionado.")
        return
        
    with st.container(border=True):
        fig = px.scatter(
            df_rentabilidad,
            x="Volumen_Venta",
            y="Rentabilidad_Pct",
            size="Tama√±o_Absoluto",
            color="Cuadrante",
            hover_name=NOMBRE_ARTICULO,
            log_x=True,
            size_max=60,
            title="An√°lisis de Rentabilidad vs. Volumen de Venta",
            labels={"Volumen_Venta": "Volumen de Venta ($) - Escala Logar√≠tmica", "Rentabilidad_Pct": "Rentabilidad (%)"},
            color_discrete_map={
                '‚≠ê Motores de Ganancia': '#2ca02c', 'üíé Gemas Ocultas': '#ff7f0e',
                'üêÑ Ventas de Volumen': '#1f77b4', 'ü§î Drenajes de Rentabilidad': '#d62728'
            }
        )
        fig.add_vline(x=df_rentabilidad['Volumen_Venta'].median(), line_dash="dash", annotation_text="Mediana Volumen")
        fig.add_hline(y=df_rentabilidad['Rentabilidad_Pct'].median(), line_dash="dash", annotation_text="Mediana Rentabilidad")
        st.plotly_chart(fig, use_container_width=True)
        
    with st.expander("Ver detalle de productos por cuadrante y explicaci√≥n", expanded=False):
        st.markdown(
            "- **‚≠ê Motores de Ganancia:** Alta venta y alta rentabilidad. Son tus estrellas. ¬°Pot√©ncialos!\n"
            "- **üêÑ Ventas de Volumen:** Alta venta, baja rentabilidad. Mueven mucho inventario pero con poco margen. Optimiza costos.\n"
            "- **üíé Gemas Ocultas:** Baja venta, alta rentabilidad. Productos muy rentables pero poco vendidos. ¬°Promoci√≥nalos!\n"
            "- **ü§î Drenajes de Rentabilidad:** Baja venta y baja rentabilidad (o negativa). Cuidado, pueden estar quit√°ndote recursos."
        )
        st.dataframe(
            df_rentabilidad[[NOMBRE_ARTICULO, 'Cuadrante', 'Volumen_Venta', 'Rentabilidad_Pct', 'Margen_Absoluto']],
            use_container_width=True, hide_index=True,
            column_config={
                "Volumen_Venta": st.column_config.NumberColumn("Venta ($)", format="$ #,##0"),
                "Rentabilidad_Pct": st.column_config.NumberColumn("Rentabilidad (%)", format="%.2f%%"),
                "Margen_Absoluto": st.column_config.NumberColumn("Margen ($)", format="$ #,##0")
            }
        )

def render_tab_rfm_accionable(rfm_df, resumen_segmentos):
    """Muestra los gr√°ficos y tablas del an√°lisis RFM con planes de acci√≥n."""
    st.subheader("Segmentaci√≥n Estrat√©gica de Clientes (RFM)")
    if rfm_df.empty or resumen_segmentos.empty:
        st.warning("No hay suficientes datos de clientes para realizar el an√°lisis RFM con los filtros actuales.")
        return
        
    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6])
        with col1:
            st.markdown("##### Resumen de Segmentos")
            st.dataframe(resumen_segmentos, use_container_width=True, hide_index=True,
                         column_config={"Ventas_Totales": st.column_config.NumberColumn("Ventas Hist√≥ricas", format="$ #,##0")})
        with col2:
            fig = px.treemap(resumen_segmentos, path=['Segmento'], values='Numero_Clientes',
                             title='Distribuci√≥n de Clientes por Segmento (Cantidad)',
                             color_discrete_sequence=px.colors.qualitative.Pastel)
            st.plotly_chart(fig, use_container_width=True)
            
    st.markdown("---")
    st.subheader("Plan de Acci√≥n por Segmento")
    
    acciones_segmento = {
        'Campeones': ('‚≠ê **Acci√≥n:** Fidelizar y Recompensar. Son tus mejores clientes. Ofr√©celes acceso anticipado, beneficios exclusivos y p√≠deles referidos.', 'green'),
        'Clientes Leales': ('üîµ **Acci√≥n:** Venta cruzada (upsell) y mantener la satisfacci√≥n. Ofr√©celes productos de mayor valor o complementarios.', 'blue'),
        'Potenciales Leales': ('üü° **Acci√≥n:** Aumentar frecuencia y compromiso. Ofr√©celes membres√≠as o programas de puntos.', 'goldenrod'),
        'Prometedores': ('üü£ **Acci√≥n:** Convertirlos en leales. Ofrece seguimiento personalizado y promociones de bienvenida.', 'purple'),
        'Nuevos Clientes': ('‚ö™ **Acci√≥n:** Brindar una excelente primera experiencia. Asegura un onboarding exitoso y soporte post-venta.', 'grey'),
        'Necesitan Atenci√≥n': ('üü† **Acci√≥n:** Reactivaci√≥n con ofertas personalizadas. Descubre por qu√© han disminuido su actividad.', 'orange'),
        'En Riesgo': ('üî¥ **Acci√≥n:** Contacto proactivo URGENTE. Ll√°malos, ofr√©celes un incentivo fuerte. Descubre el motivo de su ausencia.', 'red'),
        'A Punto de Dormir': ('üü§ **Acci√≥n:** √öltima llamada para retener. Ofrece una oferta irresistible para que vuelvan.', 'brown'),
        'Hibernando': ('‚ö´ **Acci√≥n:** Limpieza de base de datos o campa√±a de reactivaci√≥n masiva de bajo costo. Probablemente perdidos.', 'black'),
        'Otros': ('‚ùì **Acci√≥n:** An√°lisis Individual. Estos clientes tienen patrones de compra no clasificados. Investiga sus perfiles.', 'lightblue')
    }
    
    opciones_segmento = resumen_segmentos['Segmento'].unique()
    if opciones_segmento.size > 0:
        segmento_seleccionado = st.selectbox("Selecciona un segmento para ver los clientes y el plan de acci√≥n:", options=opciones_segmento)
        if segmento_seleccionado and segmento_seleccionado in acciones_segmento:
            accion, color = acciones_segmento[segmento_seleccionado]
            st.markdown(f"<p style='color:{color}; font-size:18px; font-weight:bold;'>{accion}</p>", unsafe_allow_html=True)
            
            df_display_segmento = rfm_df[rfm_df['Segmento'] == segmento_seleccionado].sort_values('Monetario', ascending=False)
            
            # Esta visualizaci√≥n es ahora segura gracias a la conversi√≥n de tipos en `realizar_analisis_rfm`
            st.dataframe(
                df_display_segmento[[NOMBRE_CLIENTE, 'Recencia', 'Frecuencia', 'Monetario']],
                help="Recencia (d√≠as desde la √∫ltima compra), Frecuencia (n¬∫ de compras), Monetario (valor total hist√≥rico)",
                use_container_width=True, hide_index=True,
                column_config={
                    NOMBRE_CLIENTE: "Nombre del Cliente",
                    "Recencia": st.column_config.NumberColumn("Recencia (d√≠as)"),
                    "Frecuencia": st.column_config.NumberColumn("Frecuencia (compras)"),
                    "Monetario": st.column_config.NumberColumn("Valor Hist√≥rico", format="$ #,##0")
                }
            )
    else:
        st.warning("No se encontraron segmentos de clientes para mostrar con los filtros actuales.")

def render_tab_tendencias(df_ventas_mes, df_pareto):
    """Muestra el gr√°fico de evoluci√≥n de ventas y el Pareto de productos."""
    st.subheader("Tendencias y Composici√≥n de Ventas en el Periodo")
    with st.container(border=True):
        st.markdown("#### Evoluci√≥n de Ventas Mensuales")
        if df_ventas_mes.empty or len(df_ventas_mes) < 2:
            st.warning("No hay suficientes datos para mostrar una tendencia mensual (se requiere m√°s de un mes).")
        else:
            fig_line = px.line(df_ventas_mes, x='Mes', y=VALOR_VENTA, markers=True,
                               title="Ventas Mensuales en el Periodo Seleccionado",
                               labels={VALOR_VENTA: 'Total Ventas ($)'})
            fig_line.update_traces(marker=dict(size=10))
            st.plotly_chart(fig_line, use_container_width=True)
            
    st.markdown("---")
    with st.container(border=True):
        st.markdown("#### An√°lisis Pareto: ¬øD√≥nde se concentra tu venta?")
        if df_pareto.empty or df_pareto['Ventas'].sum() == 0:
            st.warning("No hay suficientes datos de ventas de productos para el an√°lisis de Pareto.")
        else:
            fig_pie = px.pie(df_pareto, names='Categor√≠a', values='Ventas',
                             title='Concentraci√≥n de Ventas: Top 5 Productos vs. Resto',
                             hole=0.4, color_discrete_sequence=['#1f77b4', '#aec7e8'])
            st.plotly_chart(fig_pie, use_container_width=True)
            st.info("Este gr√°fico muestra qu√© porci√≥n de tus ingresos viene de tus 5 productos m√°s vendidos. Una alta concentraci√≥n puede ser un riesgo.")


# ==============================================================================
# SECCI√ìN 4: ORQUESTADOR PRINCIPAL DE LA P√ÅGINA
# ==============================================================================

def render_pagina_perfil():
    """Funci√≥n principal que renderiza la p√°gina completa, incluyendo filtros y an√°lisis."""
    st.title("üí° Asistente Estrat√©gico de Ventas")
    st.markdown(f"Bienvenido, **{st.session_state.usuario}**. Usa los filtros para obtener un an√°lisis 360¬∞ y potenciar tus resultados.")
    st.markdown("---")
    
    # --- FILTROS PRINCIPALES ---
    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6])
        
        with col1:
            # L√≥gica de selecci√≥n de Vendedor/Grupo
            grupos = DATA_CONFIG.get('grupos_vendedores', {})
            vendedores_unicos_orig = sorted(list(df_ventas_historico[NOM_VENDEDOR].dropna().unique()))
            nombres_grupos = sorted(grupos.keys())
            
            usuario_actual = st.session_state.usuario
            es_gerente = normalizar_texto(usuario_actual) == "GERENTE"
            
            if es_gerente:
                opciones_analisis = ["Visi√≥n General de la Empresa"] + nombres_grupos + vendedores_unicos_orig
                default_index = 0
            else:
                opciones_analisis = [usuario_actual]
                default_index = 0
            
            if not opciones_analisis:
                st.error(f"No se encontraron datos de ventas asociados al usuario '{usuario_actual}'.")
                st.stop()
                
            seleccion = st.selectbox(
                "Seleccione el Vendedor, Grupo o Visi√≥n a analizar:",
                opciones_analisis, index=default_index,
                help="Elige un perfil individual, un grupo consolidado o la visi√≥n general de la empresa."
            )

        with col2:
            # L√≥gica de selecci√≥n de Rango de Fechas
            df_ventas_historico['periodo'] = df_ventas_historico[FECHA_VENTA].dt.to_period('M')
            meses_disponibles = sorted(df_ventas_historico['periodo'].unique())
            mapa_meses = {f"{DATA_CONFIG['mapeo_meses'].get(p.month, p.month)} {p.year}": p for p in meses_disponibles}
            opciones_slider = list(mapa_meses.keys())
            
            # Define un rango por defecto (ej. √∫ltimos 12 meses) de forma segura
            start_index = max(0, len(opciones_slider) - 12)
            end_index = len(opciones_slider) - 1
            if start_index > end_index: start_index = end_index

            mes_inicio_str, mes_fin_str = st.select_slider(
                "Seleccione el Rango de Meses para el An√°lisis:",
                options=opciones_slider,
                value=(opciones_slider[start_index], opciones_slider[end_index]),
                help="Define el marco de tiempo para todos los an√°lisis en esta p√°gina."
            )
            periodo_inicio, periodo_fin = mapa_meses[mes_inicio_str], mapa_meses[mes_fin_str]
            fecha_inicio = periodo_inicio.start_time.tz_localize(None)
            fecha_fin = periodo_fin.end_time.tz_localize(None)

    # --- FILTRADO DE DATOS ---
    if seleccion == "Visi√≥n General de la Empresa":
        df_base_filtrada = df_ventas_historico
    else:
        # Normaliza la lista de vendedores a filtrar (puede ser un grupo o un individuo)
        lista_vendedores_a_filtrar = grupos.get(seleccion, [seleccion])
        lista_vendedores_a_filtrar_norm = [normalizar_texto(v) for v in lista_vendedores_a_filtrar]
        df_base_filtrada = df_ventas_historico[df_ventas_historico[NOM_VENDEDOR].isin(lista_vendedores_a_filtrar_norm)]
    
    df_periodo_seleccionado = df_base_filtrada[
        (df_base_filtrada[FECHA_VENTA] >= fecha_inicio) & (df_base_filtrada[FECHA_VENTA] <= fecha_fin)
    ]

    if df_periodo_seleccionado.empty:
        st.warning(f"No se encontraron datos para **'{seleccion}'** en el rango de **{mes_inicio_str}** a **{mes_fin_str}**. Por favor, ajuste los filtros.")
        st.stop()

    # --- EJECUCI√ìN DE AN√ÅLISIS Y RENDERIZADO ---
    with st.spinner(f"Generando inteligencia de negocios para {seleccion}..."):
        df_procesado = calcular_metricas_base(df_periodo_seleccionado)
        analisis_cartera = analizar_salud_cartera_avanzado(df_procesado, df_base_filtrada, fecha_inicio)
        df_rentabilidad = analizar_rentabilidad_avanzado(df_procesado)
        rfm_df, resumen_rfm = realizar_analisis_rfm(df_base_filtrada)
        df_ventas_mes, df_pareto = analizar_tendencias(df_procesado)
    
    st.markdown("---")
    
    generar_y_renderizar_resumen_ejecutivo(seleccion, analisis_cartera, df_rentabilidad, resumen_rfm)
    st.markdown("---")

    # --- PESTA√ëAS DE AN√ÅLISIS DETALLADO ---
    tab1, tab2, tab3, tab4 = st.tabs([
        "ü©∫ **Diagn√≥stico de Cartera**",
        "üèÜ **Segmentaci√≥n de Clientes (RFM)**",
        "üí∞ **An√°lisis de Rentabilidad**",
        "üìà **Tendencias y Composici√≥n**"
    ])

    with tab1:
        render_tab_diagnostico_cartera(analisis_cartera)
    with tab2:
        render_tab_rfm_accionable(rfm_df, resumen_rfm)
    with tab3:
        render_tab_rentabilidad(df_rentabilidad)
    with tab4:
        render_tab_tendencias(df_ventas_mes, df_pareto)

if __name__ == "__main__":
    render_pagina_perfil()
